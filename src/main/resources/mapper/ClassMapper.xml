<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.cmcc.edu.dao.ClassMapper" >
  <resultMap id="BaseResultMap" type="com.cmcc.edu.entity.Class" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="state" property="state" jdbcType="INTEGER" />
    <result column="teacher_id" property="teacherId" jdbcType="BIGINT" />
    <result column="grade_id" property="gradeId" jdbcType="INTEGER" />
    <result column="class_order" property="classOrder" jdbcType="VARCHAR" />
    <result column="school_id" property="schoolId" jdbcType="BIGINT" />
    <result column="create_name" property="createName" jdbcType="VARCHAR" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, name, state, teacher_id, grade_id, class_order, school_id,create_name,create_time
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from sch_class
    where id = #{id,jdbcType=INTEGER}
  </select>
      <select id="selectByTeacher" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
 	select 
    c.*,g.name as gradeName
    from sch_class c left join sch_grade g on c.grade_id=g.id
    where c.teacher_id = #{teacherId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from sch_class
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.cmcc.edu.entity.Class" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into sch_class (name, state, teacher_id, 
      grade_id, class_order, school_id,create_name,create_time
      )
    values (#{name,jdbcType=VARCHAR}, #{state,jdbcType=INTEGER}, #{teacherId,jdbcType=BIGINT}, 
      #{gradeId,jdbcType=INTEGER}, #{classOrder,jdbcType=VARCHAR}, #{schoolId,jdbcType=BIGINT},
      #{createName,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.cmcc.edu.entity.Class" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into sch_class
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="name != null" >
        name,
      </if>
      <if test="state != null" >
        state,
      </if>
      <if test="teacherId != null" >
        teacher_id,
      </if>
      <if test="gradeId != null" >
        grade_id,
      </if>
      <if test="classOrder != null" >
        class_order,
      </if>
      <if test="schoolId != null" >
        school_id,
      </if>
            <if test="createName != null" >
        create_name,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="state != null" >
        #{state,jdbcType=INTEGER},
      </if>
      <if test="teacherId != null" >
        #{teacherId,jdbcType=BIGINT},
      </if>
      <if test="gradeId != null" >
        #{gradeId,jdbcType=VARCHAR},
      </if>
      <if test="classOrder != null" >
        #{classOrder,jdbcType=VARCHAR},
      </if>
      <if test="schoolId != null" >
        #{schoolId,jdbcType=BIGINT},
      </if>
      <if test="createName != null" >
        #{createName,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>      
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.cmcc.edu.entity.Class" >
    update sch_class
    <set >
      <if test="name != null" >
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="state != null" >
        state = #{state,jdbcType=INTEGER},
      </if>
      <if test="teacherId != null" >
        teacher_id = #{teacherId,jdbcType=BIGINT},
      </if>
      <if test="gradeId != null" >
        grade_id = #{gradeId,jdbcType=INTEGER},
      </if>
      <if test="classOrder != null" >
        class_order = #{classOrder,jdbcType=VARCHAR},
      </if>
      <if test="schoolId != null" >
        school_id = #{schoolId,jdbcType=BIGINT},
      </if>
      <if test="createName != null" >
        create_name = #{createName,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.cmcc.edu.entity.Class" >
    update sch_class
    set name = #{name,jdbcType=VARCHAR},
      state = #{state,jdbcType=INTEGER},
      teacher_id = #{teacherId,jdbcType=BIGINT},
      grade_id = #{gradeId,jdbcType=INTEGER},
      class_order = #{classOrder,jdbcType=VARCHAR},
      school_id = #{schoolId,jdbcType=BIGINT},
      create_name = #{createName,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
  
  
   <select id="classList" resultMap="BaseResultMap" parameterType="com.cmcc.edu.entity.Class" >
    select 
    c.*,g.name as gradeName
    from sch_class c left join sch_grade g on c.grade_id=g.id
    where  1=1
    	<if test="name != null" >
       and c.name = #{name,jdbcType=VARCHAR}
      </if>
      <if test="state != null" >
       and  c.state = #{state,jdbcType=INTEGER}
      </if>
      <if test="teacherId != null" >
       and  c.teacher_id = #{teacherId,jdbcType=BIGINT}
      </if>
      <if test="gradeId != null" >
        and c.grade_id = #{gradeId,jdbcType=INTEGER}
      </if>
      <if test="classOrder != null" >
       and  c.class_order = #{classOrder,jdbcType=VARCHAR}
      </if>
      <if test="schoolId != null" >
       and  c.school_id = #{schoolId,jdbcType=BIGINT}
      </if>
      <if test="createName != null" >
       and  c.create_name = #{createName,jdbcType=VARCHAR}
      </if>
      <if test="createTime != null" >
       and  c.create_time = #{createTime,jdbcType=TIMESTAMP}
      </if>     
  </select>
     <select id="findAll" resultMap="BaseResultMap">
        SELECT c.* ,g.name as gradeName FROM sch_class c, sch_grade g where c.grade_id= g.id
    </select>
    
     <delete id="deleteBatchRecord" parameterType="java.util.List" >
	    	delete from sch_class where id in 
	    <foreach collection="list" index="index" item="item" open="(" separator="," close=")">   
	        #{item}   
	    </foreach>
    </delete>  
    
    <select id="selectClassBygrade" resultMap="BaseResultMap" parameterType="com.cmcc.edu.entity.Class" >
    select 
    <include refid="Base_Column_List" />
    from sch_class
    where  1=1
      <if test="gradeId != null" >
        and grade_id = #{gradeId,jdbcType=INTEGER}
      </if>
      
      <if test="schoolId != null" >
       and  school_id = #{schoolId,jdbcType=BIGINT}
      </if>
        
  </select>   

    <insert id="insertBatch" parameterType="java.util.List" >
	    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
	      SELECT LAST_INSERT_ID()
	    </selectKey>
		    insert into sch_class (name, state, teacher_id, 
      		grade_id, class_order, school_id,create_name,create_time)
      		values
		    <foreach collection="list" item="item" index="index" separator="," >  
		        (#{item.name,jdbcType=VARCHAR}, #{item.state,jdbcType=INTEGER}, #{item.teacherId,jdbcType=BIGINT}, 
      			 #{item.gradeId,jdbcType=INTEGER}, #{item.classOrder,jdbcType=VARCHAR}, #{item.schoolId,jdbcType=BIGINT},
      			 #{item.createName,jdbcType=VARCHAR}, #{item.createTime,jdbcType=TIMESTAMP})
	    	</foreach>  

	</insert>  
</mapper>